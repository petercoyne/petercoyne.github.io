{
    "version": "https://jsonfeed.org/version/1",
    "title": "petercoyne.github.io",
    "description": "",
    "home_page_url": "https://petercoyne.github.io",
    "feed_url": "https://petercoyne.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Peter Coyne"
    },
    "items": [
        {
            "id": "https://petercoyne.github.io/useful-tools-3-iterm.html",
            "url": "https://petercoyne.github.io/useful-tools-3-iterm.html",
            "title": "Useful Tools 3: iTerm",
            "summary": " iTerm is another macOS exclusive app. It is a replacement for the stock Terminal.app, and comes with a slew of advanced features. I'll briefly cover some of the features that matter to me. The default Terminal in macOS is a very competent terminal emulator,&hellip;",
            "content_html": "\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/4/Screenshot-2020-12-06-at-16.15.25.png\" height=\"629\" width=\"857\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    iTerm is another macOS exclusive app. It is a replacement for the stock Terminal.app, and comes with a slew of advanced features. I'll briefly cover some of the features that matter to me.\n  </p>\n\n    <h2 id=\"24bit-colour-support\">\n      24-bit colour support\n    </h2>\n\n  <p>\n    The default Terminal in macOS is a very competent terminal emulator, however it's implementation of 256-colour xterm emulation is somewhat lacking. What this means in practice is that apps which make use of the extended colour palette can look terrible. Below is an example using bpytop, a system monitor&nbsp;\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/4/Screenshot-2020-12-06-at-16.29.53.png\" height=\"650\" width=\"1129\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    As you can see, this hideous monstrosity is barely functional when used with the built-in terminal. Contrast this with how it was designed to look (courtesy of iTerm2):\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/4/Screenshot-2020-12-06-at-16.26.24.png\" height=\"838\" width=\"1370\" alt=\"\" />\n      \n    </figure>\n\n    <h2 id=\"rich-tmux-integration\">\n      Rich tmux integration\n    </h2>\n\n  <p>\n    Tmux is a terminal multiplexer. This is a type of software that allows you to run multiple persistent terminal sessions in one window. It is particularly useful when working on remote servers, as lets you use multiple windows without making a whole bunch of ssh connections.\n  </p>\n\n  <p>\n    When using tmux in traditional terminal emulators, the interface is accessed through shortcut keys and inspected using a text-based surround on the terminal layer. Where iTerm 2 differs from other terminals is that it can natively interact with tmux. This means instead of pressing <code>ctrl-b , 1</code> to switch to the first tab in a tmux session, you can see the tabs natively in iTerm and simply click which one you want to navigate to. Another advantage of integrated tmux support is that it hooks into the terminal's native scrollback, allowing the user to scroll through the previous output of the current window using the mouse wheel instead of using obscure commands. Finally, iTerm integrates with tmux's split panes functionality, again providing a native interface for the feature.\n  </p>\n\n  <p>\n    All of this combines to enable a kind of remote virtual desktop for CLI applications, all accessible in a user friendly way. This is invaluable if you need to do a lot of work on a remote system.\n  </p>",
            "image": "https://petercoyne.github.io/media/posts/4/Screenshot-2020-12-06-at-18.11.55.png",
            "author": {
                "name": "Peter Coyne"
            },
            "tags": [
            ],
            "date_published": "2020-12-06T16:48:53+00:00",
            "date_modified": "2020-12-06T18:50:43+00:00"
        },
        {
            "id": "https://petercoyne.github.io/useful-tools-2-sketch.html",
            "url": "https://petercoyne.github.io/useful-tools-2-sketch.html",
            "title": "Useful Tools 2: Sketch",
            "summary": " Sketch is an excellent piece of design software. Intended for designing digital products (websites, user interfaces, icons etc), it is available on macOS exclusively. I use it extensively for web projects, and increasingly for app layouts. On first launching the app, you are greeted&hellip;",
            "content_html": "\n  <p>\n    Sketch is an excellent piece of design software. Intended for designing digital products (websites, user interfaces, icons etc), it is available on macOS exclusively. I use it extensively for web projects, and increasingly for app layouts.\n  </p>\n\n  <p>\n    On first launching the app, you are greeted with a concise UI. Layers &amp; pages on the left, selected item details on the right, and commonly used functionality along the top. The centre of the workspace displays an unlimited vector canvas, navigable using standard shortcut keys you might be used to from&nbsp;\n  </p>\n\n  <p>\n    There are very few basic components which can be added to the canvas:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/3/Screenshot-2020-12-06-at-16.51.53.png\" height=\"419\" width=\"376\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    The most commonly used items each have an accompanying shortcut key. For example to create an artboard (a region for containing design sections), you hit <code>a</code> on your keyboard and drag out the artboard onto the canvas. If you want to add a rectangle to the new artboard hit <code>r</code> and drag out the rectangle. This is a very speedy way of adding required elements into your design.\n  </p>\n\n  <p>\n    Once you have an object created, you can use the right hand pane to apply properties until the element looks appropriate.<br>\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/3/Screenshot-2020-12-06-at-16.56.18.png\" height=\"927\" width=\"259\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    Again, the functionality of the inspect panel is pared down to a minimal set of properties. Combining these however, seems to enable the creation of an extremely wide variety of illustrations and styles. For example, in the image below I created a shiny marble image for a Mobile Apps module assignment.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/3/Screenshot-2020-12-06-at-17.15.07.png\" height=\"552\" width=\"1482\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    The resulting image (immediately to the left of the styles panel), is created using 3 simple shapes.&nbsp;You can see the selected circle on the left, and its associated styles in the right hand panel. This is the base of the image, and has a gradient fill, one outer shadow and two inner shadows. The black square contains the second and third shape. On top is a modified oval with a gradient fill to semitransparent, this is meant to indicate the shininess of the object. The third shape is a blurred oval to replicate light refraction through the marble.\n  </p>\n\n  <p>\n    As shown, a small set of vector objects can be combined to make a richer looking object. These layers can then be grouped together into components, which can be updated document wide. This way of organising items allows for rapid creation of complex documents, while enabling maintainability through a minimalist organisational principle.\n  </p>",
            "image": "https://petercoyne.github.io/media/posts/3/Screenshot-2020-12-06-at-15.49.29-2.png",
            "author": {
                "name": "Peter Coyne"
            },
            "tags": [
            ],
            "date_published": "2020-12-04T17:26:00+00:00",
            "date_modified": "2020-12-06T18:14:41+00:00"
        },
        {
            "id": "https://petercoyne.github.io/useful-tools-1-notion.html",
            "url": "https://petercoyne.github.io/useful-tools-1-notion.html",
            "title": "Useful Tools 1: Notion",
            "summary": "Notion is an \"All-in-one workspace\". It combines functions of a Wiki, a project/task manager, database and a note taking app. The personal pro plan is free for educational use, so I recently decided to evaluate it as a system for managing my college projects. Unlike&hellip;",
            "content_html": "<p>Notion is an \"All-in-one workspace\". It combines functions of a Wiki, a project/task manager, database and a note taking app. The personal pro plan is free for educational use, so I recently decided to evaluate it as a system for managing my college projects.</p>\n<p>Unlike many other pieces of project management software, a Notion workspace can be tailored to suit the needs of each project. The software provides a few fundamental building components: <strong>Pages,</strong>Â <strong>Blocks </strong>and<strong> Views.</strong></p>\n<h2>Pages</h2>\n<p>Pages in Notion are the primary means of structuring your system. Pages can be created as top-level items, or can be nested inside one another. Pages can contain a title, icon and cover image.</p>\n<p>The New Page screen contains several notable options. The user can either start from scratch by adding content, or choose a template from a large selection available within the app. Advanced users may choose to create their own templates for sharing with others.</p>\n<p>Below the templates there are options for making a <strong>Database</strong> type page. These are akin to a simplified version of Microsoft Excel sheets.Â </p>\n<p>Database columns can contain a number of field types including text, select, multi-select, person, date, files/media. There are also some advanced column types including formulae and relations. Relations allows you to map data from one database into another, as seen in the Task/Module relation in the first screenshot above. This allows me to view e.g. all tasks assigned to a particular model.</p>\n<h2>Blocks</h2>\n<p>All types of pages act as a container for Blocks, which are where you put the actual content you need. There are currently dozens of block types available, with more being added all the time. Block types can be selected by text command, for example /h2 will insert a Heading 2 block, /map will embed a google map. /mention allows you to mention another user if using it in collaboration with others. These are shortcuts for advanced users, as there is a GUI available to help you choose what kind of block you need.</p>\n<p>Overall I've found the block system to suit my personal workflow. It's very customisable, and offers features beyond the capabilities of markdown-based note taking applications.</p>\n<h2>Views</h2>\n<figure class=\"post__image post__image--right\"><img loading=\"lazy\"  src=\"https://petercoyne.github.io/media/posts/2/Screenshot-2020-12-01-at-15.40.08.png\" alt=\"Database Views\" width=\"150\" height=\"252\"></figure>\n<p>Data within a database can be visualised in a number of ways, as shown to the right of this paragraph. The screenshot at the top of the page is using the new \"Timeline\" view type.</p>\n<p>Other view types are suitable for different ways of working. Each database-type page can be assigned multiple different views, and each view can be named and customised. This allows me to quickly switch between board view (below) to track the progress of my projects, and timeline view where I can look at deadlines and see what I need to work on at any given time.</p>\n<figure class=\"post__image post__image--wide\" ><img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/2/Screenshot-2020-12-01-at-16.04.48-2.png\" alt=\"Board View\" width=\"1597\" height=\"831\">\n<figcaption >Board VIew</figcaption>\n</figure>\n<h2>Conclusion</h2>\n<p>While I'm still new to Notion, it feels like a very promising tool. I've barely touched on the features in this post, features like collaboration and the many different ways of structuring your content. Admittedly there is an initial learning curve to the system, but it has been a rewarding experience so far.</p>\n<p>Â </p>\n<p>Â </p>",
            "image": "https://petercoyne.github.io/media/posts/2/Screenshot-2020-12-01-at-15.17.48-2.png",
            "author": {
                "name": "Peter Coyne"
            },
            "tags": [
            ],
            "date_published": "2020-12-01T16:12:31+00:00",
            "date_modified": "2020-12-01T17:51:40+00:00"
        }
    ]
}
