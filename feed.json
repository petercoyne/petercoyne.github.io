{
    "version": "https://jsonfeed.org/version/1",
    "title": "petercoyne.github.io",
    "description": "",
    "home_page_url": "https://petercoyne.github.io",
    "feed_url": "https://petercoyne.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Peter Coyne"
    },
    "items": [
        {
            "id": "https://petercoyne.github.io/software-reviewithdiscussion.html",
            "url": "https://petercoyne.github.io/software-reviewithdiscussion.html",
            "title": "Software Review/Discussion: Teams &amp; Moodle",
            "summary": " 1. Microsoft Teams Microsoft teams is a business/education communication platform. It's the software we use at GMIT to access lectures and labs. We also had an opportunity this semester to use it for a group project in the IT Professional Skills module. Initially developed&hellip;",
            "content_html": "\n    <h1 id=\"1-microsoft-teams\">\n      1. Microsoft Teams\n    </h1>\n\n  <p>\n    Microsoft teams is a business/education communication platform. It's the software we use at GMIT to access lectures and labs. We also had an opportunity this semester to use it for a group project in the IT Professional Skills module. Initially developed as a competitor to <a href=\"https://slack.com\" target=\"_blank\">Slack</a>, the software aims to provide a comprehensive solution for communication in a business or education setting.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/7/teams2.png\" height=\"1005\" width=\"1674\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    The main Teams window (pictured above running on macOS) features a large search box in the main title bar. The user's avatar is displayed in the top right. When clicked, this brings up a menu related to the user's account. The main navigation is implemented using tabs on the left hand side of the window. The central pane changes depending on which tab is selected.\n  </p>\n\n  <p>\n    In this first screenshot we see the \"Activity\" pane. This pane features a list view on the left containing the most recently active conversations in which the user is participating. Clicking on an individual item takes you to the team page for that particular conversation.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/7/team-tabs.png\" height=\"57\" width=\"1132\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    Digging in a bit more to the conversation view, we find another tab bar at the top of every team page, with a list of tabs relevant to that particular team. This tab bar can be customised by team admins, to provide useful apps and links. In our group project I had the opportunity to experiment with this functionality by creating tabs for a mind map (Mindmeister), our presentation (Prezi) and our shared report document. It was useful, however as Teams uses its own built-in web browser, it did not use the cookies from my main browser, requiring me to log in to each service twice.\n  </p>\n\n  <p>\n    Other features of this bar include a Meet button, which allows scheduling of meetings, and the three dots menu, which allows managing of the channel, notification settings etc.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/7/teams-calendar.png\" height=\"1005\" width=\"1674\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    The final item I will mention is the calendar view. This view became our de facto timetable for the semester, as it provided more up-to-date information than the official timetable website. Presumably the official timetable website is less flexible from a lecturers perspective than the Teams one. While there was some confusion early in the semester, it became almost second nature to use by the end.\n  </p>\n\n    <h2 id=\"pros\">\n      Pros\n    </h2>\n\n  <ul>\n    <li>When combined with Moodle, Teams provides all the functionality we needed for studying online.</li><li>The application was stable.</li><li>Allows for student to student communication as well as staff &lt;-&gt; student.</li><li>Timetable was a single source of truth for the semester.</li><li>Meeting feature was suitable for both lectures and labs.</li><li>Integrates with other Microsoft apps. It seems to be the right choice for a Microsoft-based IT infrastructure.</li>\n  </ul>\n\n    <h2 id=\"cons\">\n      Cons\n    </h2>\n\n  <ul>\n    <li>Took some time to learn the ins and outs, interface is not so intuitive.</li><li>Some flakiness in the initial setup, like getting notifications from groups that I was not in, or not being assigned to groups I was supposed to be in.</li><li>Most lecturers had issues relating to bandwidth, sharing screens, visualiser use, audio issues, Teams interacting poorly with other applications etc.</li><li>The macOS version of the application does not integrate well with the operating system, causing visual artefacts.</li>\n  </ul>\n\n    <h2 id=\"conclusion\">\n      Conclusion\n    </h2>\n\n  <p>\n    Teams is adequate. The user interface is functional but not particularly elegant. I would like to try Slack in an academic setting to be able to compare, but that seems unlikely to happen any time soon.&nbsp;\n  </p>\n\n    <h1 id=\"2-moodle\">\n      2. Moodle\n    </h1>\n\n  <p>\n    Moodle is the Learning Management System in use at GMIT under the name \"Learn Online\". It is an open source piece of web software which provides a wide array of functionality to lecturers and students. As a modular system, it allows staff to create and manage learning information for students on individual course pages. The structure of the information varies between lecturers, with some spending more more time on organisation than others.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/7/moodle1a.png\" height=\"1118\" width=\"1576\" alt=\"\" />\n      \n    </figure>\n\n    <h2 id=\"pros\">\n      Pros\n    </h2>\n\n  <ul>\n    <li>Free and open source</li><li>Immense functionality available</li><li>Easily navigable once familiarity sets in</li>\n  </ul>\n\n    <h2 id=\"cons\">\n      Cons\n    </h2>\n\n  <ul>\n    <li>Inelegant user experience</li><li>Features implemented to different degrees depending on lecturer</li><li>Administrative complexity</li><li>No integration with Teams</li>\n  </ul>\n\n    <h2 id=\"conclusion\">\n      Conclusion\n    </h2>\n\n  <p>\n    While the layout of individual module pages varies, I find the overall user experience of the system to be less than ideal. There is a lack of consistency amongst the UI elements. Menus, buttons and links are confusingly placed with uneven spacing throughout. I feel this is natural given the age and complexity of the system. Add to this the fact that open source software doesn't have the greatest reputation for well designed user interfaces, and we're left with another piece of software which is functional but inelegant on the front end.\n  </p>\n\n  <p>\n    I would love to see a modern LMS developed that features the power and flexibility of Moodle, combined with a consistent and modern UI akin to something like <a href=\"https://petercoyne.github.io/useful-tools-1-notion.html\">Notion</a>. I feel that learners deserve tools that get out of their way and allow them to absorb the subject matter in an easily digestible manner, and I am hopeful that such tools will make their way into the mainstream going forward.\n  </p>\n\n  <p>\n    \n  </p>",
            "image": "https://petercoyne.github.io/media/posts/7/teams1.png",
            "author": {
                "name": "Peter Coyne"
            },
            "tags": [
            ],
            "date_published": "2020-12-11T22:32:14+00:00",
            "date_modified": "2020-12-13T21:52:13+00:00"
        },
        {
            "id": "https://petercoyne.github.io/useful-tools-4-publii.html",
            "url": "https://petercoyne.github.io/useful-tools-4-publii.html",
            "title": "Useful Tools 5: Publii",
            "summary": " Publii is a static blog generator with a GUI. It allows me to publish this blog on hosting that doesn't support dynamic content, github.io in this case. Publishing on Github is free and also means you gain the benefits of version control. The app&hellip;",
            "content_html": "\n  <p>\n    Publii is a static blog generator with a GUI. It allows me to publish this blog on hosting that doesn't support dynamic content, github.io in this case. Publishing on Github is free and also means you gain the benefits of version control.\n  </p>\n\n  <p>\n    The app itself is rather straightforward to use. The main sidebar has a list of all the functions you might need for managing your blog.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/5/Screenshot-2020-12-06-at-18.33.08.png\" height=\"738\" width=\"319\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    The sidebar functions in essentially the same way as Wordpress or similar software, with support for Posts, Tags and multiple authors. The Theme, Site settings and Server links provide extensive customisation options for your blog. The two buttons on the bottom allow a quick preview to be generated, and to synchronise the site using git.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/5/publii1.png\" height=\"895\" width=\"1312\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    Above is a screenshot of the post editing window. It looks quite minimal but in reality there are many hidden widgets which only make themselves visible on mouseover. Similar to Notion, which briefly reviewed&nbsp;<a href=\"https://petercoyne.github.io/useful-tools-1-notion.html\">here</a>, the basic component of a blog post in Publii is a block. A block can be a header, paragraph, image etc. The interface for interacting with these blocks is much less refined in Publii than it is in Notion, leading me to hope that Notion will add blog-like functionality in the future.\n  </p>\n\n  <p>\n    These niggles aside, I find the post editing interface to be relatively distraction-free. It generally gets out of the way and lets authors really focus on the content they are generating.\n  </p>\n\n  <p>\n    Overall, the interface is serviceable but nowhere near the level of elegance of the previous tools I have evaluated for this series of posts. It is very obviously a cross platform app based on web technology. While using web technologies for native applications is not inherently a bad thing, they require significant investment of time to produce functionality that might otherwise be provided natively by each operating system. Examples of well executed web-based native apps can be found in apps like Discord and Visual Studio Code.\n  </p>\n\n  <p>\n    In terms of the output of the final blog, I found the built in theme to be sufficient for my needs. I did try installing one of the many free available themes from the Publii marketplace, which worked well but I ultimately settled on the theme you see here.\n  </p>\n\n  <p>\n    There are a variety of static blog generators available, however most of them require use of the command line and thus require a mental model of the application's structure. Publii, as a GUI tool, removes the need for this. All of its options are laid out in a straightforward manner. If the interface was more refined I would find this tool enjoyable to use, however it lacks the elegance of more mature web-based applications -- let alone native macOS competition like <a href=\"https://ulysses.app\" target=\"_blank\">Ulysses</a>.\n  </p>\n\n  <p>\n    In conclusion, Publii <em>is</em> a useful tool, despite its shortcomings, but if I continue to blog in the future I will be searching for an alternative.\n  </p>",
            "image": "https://petercoyne.github.io/media/posts/5/Screenshot-2020-12-06-at-18.22.50.png",
            "author": {
                "name": "Peter Coyne"
            },
            "tags": [
            ],
            "date_published": "2020-12-11T17:06:44+00:00",
            "date_modified": "2020-12-11T17:06:44+00:00"
        },
        {
            "id": "https://petercoyne.github.io/useful-tools-4-bitwig.html",
            "url": "https://petercoyne.github.io/useful-tools-4-bitwig.html",
            "title": "Useful Tools 4: Bitwig Studio",
            "summary": " A Digital Audio Workstation (DAW) is the software used by producers and audio engineers to create and record music. They have long been of interest to me, as they merge two of my hobbies into one: music and computing. Bitwig is a modular non-linear&hellip;",
            "content_html": "\n  <p>\n    A Digital Audio Workstation (DAW) is the software used by producers and audio engineers to create and record music. They have long been of interest to me, as they merge two of my hobbies into one: music and computing. Bitwig is a modular non-linear DAW, similar to Ableton Live. It is cross platform and runs on Windows, Linux and macOS. The audio engine is written in C++ and the user interface uses Java.\n  </p>\n\n  <p>\n    Created by ex-Ableton engineers in Germany, Bitwig is a relative newcomer to the DAW world. Designed from the ground up for modularity, it uses a custom cross-platform UI toolkit, enabling a refined, dense and efficient user interface. Below I will give a breakdown of how it all works.&nbsp;\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/6/bitwig-elements.png\" height=\"1119\" width=\"2041\" alt=\"\" />\n      \n    </figure>\n\n    <h2 id=\"1-title-bar\">\n      1. Title bar\n    </h2>\n\n  <p>\n    Starting with the simplest element of the lot, the titlebar holds tabs for your open projects, a link to the Bitwig dashboard, and non-native window controls.\n  </p>\n\n    <h2 id=\"2-toolbar\">\n      2. Toolbar\n    </h2>\n\n  <p>\n    This element contains transport controls (for playing, pausing and navigating through the timeline), track info and commonly used controls.\n  </p>\n\n    <h2 id=\"3-inspector-panel\">\n      3. Inspector panel\n    </h2>\n\n  <p>\n    This panel allows users to see the details of the currently selected item in the timeline. It is divided into two sections: Arranger Clip (top) and Notes/Audio Event (bottom). The arranger clip section shows the position, length, offset and looping parameters of the selected item. The bottom section shows different parameters depending on the type of clip which is selected. If a notes clip is selected, the section exposes parameters which allow you to adjust the key, velocity, gain, pan and pitch of the notes in the timeline.\n  </p>\n\n    <h2 id=\"4-mixer\">\n      4. Mixer\n    </h2>\n\n  <p>\n    This section displays a vertical list of all tracks in the timeline, with accompanying controls for record, solo, mute, volume and automation. It also features a level meter for monitoring the volume of each track.\n  </p>\n\n    <h2 id=\"5-arranger\">\n      5. Arranger\n    </h2>\n\n  <p>\n    This is where all of the components of an audio piece are laid out. To match the mixer, the tracks are displayed vertically, while the horizontal dimension represents time. I could write a whole series of blog posts on this view alone. The arranger can be navigated using gestures bound to the middle mouse button. It can display notes, audio and automation.\n  </p>\n\n    <h2 id=\"6-browser\">\n      6. Browser\n    </h2>\n\n  <p>\n    The browser panel allows search, navigation and tagging of all available samples, multisamples, devices, presets and files.\n  </p>\n\n    <h2 id=\"7-device-panel\">\n      7. Device Panel\n    </h2>\n\n  <p>\n    The device panel is another key element to working with a piece of music. It has three display modes. The first mode allows editing of the notes in a notes clip, essentially acting as interactive sheet music. The second mode allows editing of audio. This mode displays the raw audio waveform from voice or recorded instruments, enabling fine-grained control over timing, pitch and automation. The final mode is the device chain, which shows the signal flow from the raw notes/audio to the final output to the master track. An example device chain might take input from a notes clip and feed it into a software synthesiser to produce audio. Effects modules can then be added to the chain to sculpt the sound to the operators preference.\n  </p>",
            "image": "https://petercoyne.github.io/media/posts/6/Screenshot-2020-12-11-at-13.23.24.png",
            "author": {
                "name": "Peter Coyne"
            },
            "tags": [
            ],
            "date_published": "2020-12-11T15:16:01+00:00",
            "date_modified": "2020-12-11T17:09:05+00:00"
        },
        {
            "id": "https://petercoyne.github.io/useful-tools-3-iterm.html",
            "url": "https://petercoyne.github.io/useful-tools-3-iterm.html",
            "title": "Useful Tools 3: iTerm",
            "summary": " iTerm is another macOS exclusive app. It is a replacement for the stock Terminal.app, and comes with a slew of advanced features. I'll briefly cover some of the features that matter to me. The default Terminal in macOS is a very competent terminal emulator,&hellip;",
            "content_html": "\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/4/Screenshot-2020-12-06-at-16.15.25.png\" height=\"629\" width=\"857\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    iTerm is another macOS exclusive app. It is a replacement for the stock Terminal.app, and comes with a slew of advanced features. I'll briefly cover some of the features that matter to me.\n  </p>\n\n    <h2 id=\"24bit-colour-support\">\n      24-bit colour support\n    </h2>\n\n  <p>\n    The default Terminal in macOS is a very competent terminal emulator, however it's implementation of 256-colour xterm emulation is somewhat lacking. What this means in practice is that apps which make use of the extended colour palette can look terrible. Below is an example using bpytop, a system monitor&nbsp;\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/4/Screenshot-2020-12-06-at-16.29.53.png\" height=\"650\" width=\"1129\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    As you can see, this hideous monstrosity is barely functional when used with the built-in terminal. Contrast this with how it was designed to look (courtesy of iTerm2):\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/4/Screenshot-2020-12-06-at-16.26.24.png\" height=\"838\" width=\"1370\" alt=\"\" />\n      \n    </figure>\n\n    <h2 id=\"rich-tmux-integration\">\n      Rich tmux integration\n    </h2>\n\n  <p>\n    Tmux is a terminal multiplexer. This is a type of software that allows you to run multiple persistent terminal sessions in one window. It is particularly useful when working on remote servers, as lets you use multiple windows without making a whole bunch of ssh connections.\n  </p>\n\n  <p>\n    When using tmux in traditional terminal emulators, the interface is accessed through shortcut keys and inspected using a text-based surround on the terminal layer. Where iTerm 2 differs from other terminals is that it can natively interact with tmux. This means instead of pressing <code>ctrl-b , 1</code> to switch to the first tab in a tmux session, you can see the tabs natively in iTerm and simply click which one you want to navigate to. Another advantage of integrated tmux support is that it hooks into the terminal's native scrollback, allowing the user to scroll through the previous output of the current window using the mouse wheel instead of using obscure commands. Finally, iTerm integrates with tmux's split panes functionality, again providing a native interface for the feature.\n  </p>\n\n  <p>\n    All of this combines to enable a kind of remote virtual desktop for CLI applications, all accessible in a user friendly way. This is invaluable if you need to do a lot of work on a remote system.\n  </p>",
            "image": "https://petercoyne.github.io/media/posts/4/Screenshot-2020-12-06-at-18.11.55.png",
            "author": {
                "name": "Peter Coyne"
            },
            "tags": [
            ],
            "date_published": "2020-12-06T16:48:53+00:00",
            "date_modified": "2020-12-06T18:50:43+00:00"
        },
        {
            "id": "https://petercoyne.github.io/useful-tools-2-sketch.html",
            "url": "https://petercoyne.github.io/useful-tools-2-sketch.html",
            "title": "Useful Tools 2: Sketch",
            "summary": " Sketch is an excellent piece of design software. Intended for designing digital products (websites, user interfaces, icons etc), it is available on macOS exclusively. I use it extensively for web projects, and increasingly for app layouts. On first launching the app, you are greeted&hellip;",
            "content_html": "\n  <p>\n    Sketch is an excellent piece of design software. Intended for designing digital products (websites, user interfaces, icons etc), it is available on macOS exclusively. I use it extensively for web projects, and increasingly for app layouts.\n  </p>\n\n  <p>\n    On first launching the app, you are greeted with a concise UI. Layers &amp; pages on the left, selected item details on the right, and commonly used functionality along the top. The centre of the workspace displays an unlimited vector canvas, navigable using standard shortcut keys you might be used to from&nbsp;\n  </p>\n\n  <p>\n    There are very few basic components which can be added to the canvas:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/3/Screenshot-2020-12-06-at-16.51.53.png\" height=\"419\" width=\"376\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    The most commonly used items each have an accompanying shortcut key. For example to create an artboard (a region for containing design sections), you hit <code>a</code> on your keyboard and drag out the artboard onto the canvas. If you want to add a rectangle to the new artboard hit <code>r</code> and drag out the rectangle. This is a very speedy way of adding required elements into your design.\n  </p>\n\n  <p>\n    Once you have an object created, you can use the right hand pane to apply properties until the element looks appropriate.<br>\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/3/Screenshot-2020-12-06-at-16.56.18.png\" height=\"927\" width=\"259\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    Again, the functionality of the inspect panel is pared down to a minimal set of properties. Combining these however, seems to enable the creation of an extremely wide variety of illustrations and styles. For example, in the image below I created a shiny marble image for a Mobile Apps module assignment.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/3/Screenshot-2020-12-06-at-17.15.07.png\" height=\"552\" width=\"1482\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    The resulting image (immediately to the left of the styles panel), is created using 3 simple shapes.&nbsp;You can see the selected circle on the left, and its associated styles in the right hand panel. This is the base of the image, and has a gradient fill, one outer shadow and two inner shadows. The black square contains the second and third shape. On top is a modified oval with a gradient fill to semitransparent, this is meant to indicate the shininess of the object. The third shape is a blurred oval to replicate light refraction through the marble.\n  </p>\n\n  <p>\n    As shown, a small set of vector objects can be combined to make a richer looking object. These layers can then be grouped together into components, which can be updated document wide. This way of organising items allows for rapid creation of complex documents, while enabling maintainability through a minimalist organisational principle.\n  </p>",
            "image": "https://petercoyne.github.io/media/posts/3/Screenshot-2020-12-06-at-15.49.29-2.png",
            "author": {
                "name": "Peter Coyne"
            },
            "tags": [
            ],
            "date_published": "2020-12-04T17:26:00+00:00",
            "date_modified": "2020-12-13T15:25:11+00:00"
        },
        {
            "id": "https://petercoyne.github.io/useful-tools-1-notion.html",
            "url": "https://petercoyne.github.io/useful-tools-1-notion.html",
            "title": "Useful Tools 1: Notion",
            "summary": "Notion is an \"All-in-one workspace\". It combines functions of a Wiki, a project/task manager, database and a note taking app. The personal pro plan is free for educational use, so I recently decided to evaluate it as a system for managing my college projects. Unlike&hellip;",
            "content_html": "<p>Notion is an \"All-in-one workspace\". It combines functions of a Wiki, a project/task manager, database and a note taking app. The personal pro plan is free for educational use, so I recently decided to evaluate it as a system for managing my college projects.</p>\n<p>Unlike many other pieces of project management software, a Notion workspace can be tailored to suit the needs of each project. The software provides a few fundamental building components: <strong>Pages,</strong> <strong>Blocks </strong>and<strong> Views.</strong></p>\n<h2>Pages</h2>\n<p>Pages in Notion are the primary means of structuring your system. Pages can be created as top-level items, or can be nested inside one another. Pages can contain a title, icon and cover image.</p>\n<p>The New Page screen contains several notable options. The user can either start from scratch by adding content, or choose a template from a large selection available within the app. Advanced users may choose to create their own templates for sharing with others.</p>\n<p>Below the templates there are options for making a <strong>Database</strong> type page. These are akin to a simplified version of Microsoft Excel sheets. </p>\n<p>Database columns can contain a number of field types including text, select, multi-select, person, date, files/media. There are also some advanced column types including formulae and relations. Relations allows you to map data from one database into another, as seen in the Task/Module relation in the first screenshot above. This allows me to view e.g. all tasks assigned to a particular module.</p>\n<h2>Blocks</h2>\n<p>All types of pages act as a container for Blocks, which are where you put the actual content you need. There are currently dozens of block types available, with more being added all the time. Block types can be selected by text command, for example /h2 will insert a Heading 2 block, /map will embed a google map. /mention allows you to mention another user if using it in collaboration with others. These are shortcuts for advanced users, as there is a GUI available to help you choose what kind of block you need.</p>\n<p>Overall I've found the block system to suit my personal workflow. It's very customisable, and offers features beyond the capabilities of markdown-based note taking applications.</p>\n<h2>Views</h2>\n<figure class=\"post__image post__image--right\"><img loading=\"lazy\"  src=\"https://petercoyne.github.io/media/posts/2/Screenshot-2020-12-01-at-15.40.08.png\" alt=\"Database Views\" width=\"150\" height=\"252\"></figure>\n<p>Data within a database can be visualised in a number of ways, as shown to the right of this paragraph. The screenshot at the top of the page is using the new \"Timeline\" view type.</p>\n<p>Other view types are suitable for different ways of working. Each database-type page can be assigned multiple different views, and each view can be named and customised. This allows me to quickly switch between board view (below) to track the progress of my projects, and timeline view where I can look at deadlines and see what I need to work on at any given time.</p>\n<figure class=\"post__image post__image--wide\" ><img loading=\"lazy\" src=\"https://petercoyne.github.io/media/posts/2/Screenshot-2020-12-01-at-16.04.48-2.png\" alt=\"Board View\" width=\"1597\" height=\"831\">\n<figcaption >Board VIew</figcaption>\n</figure>\n<h2>Conclusion</h2>\n<p>While I'm still new to Notion, it feels like a very promising tool. I've barely touched on the features in this post, features like collaboration and the many different ways of structuring your content. Admittedly there is an initial learning curve to the system, but it has been a rewarding experience so far.</p>\n<h3>Update (13/12/2020)</h3>\n<p>I have continued to use Notion following this evaluation, and find myself enamoured by its flexibility, consistency and usability. I plan to migrate most of my note taking, calendar and project management tasks to the system. Collaboration is baked into Notion at a low level, so I am looking forward to experimenting with those features on projects in the future.</p>",
            "image": "https://petercoyne.github.io/media/posts/2/Screenshot-2020-12-01-at-15.17.48-2.png",
            "author": {
                "name": "Peter Coyne"
            },
            "tags": [
            ],
            "date_published": "2020-12-01T16:12:31+00:00",
            "date_modified": "2020-12-13T15:25:18+00:00"
        }
    ]
}
